export declare class Queue<T> implements Iterable<T> {
    /**
     * An internal list keeping the queued items.
     */
    private queue;
    /**
     * Creates a new Queue instance and
     * enqueues the given `items`.
     *
     * @param  {*} items
     */
    constructor(...items: T[]);
    /**
     * Returns an iterable of the values in the queue.
     *
     * @returns {IterableIterator}
     */
    [Symbol.iterator](): IterableIterator<T>;
    /**
     * Pushes new `items` into the queue.
     *
     * @param  {*} items
     *
     * @returns {Queue}
     */
    enqueue(...items: T[]): this;
    /**
     * Removes and returns the item which is up for processing.
     * Returns `undefined` if the queue is empty.
     *
     * @returns {*}
     */
    dequeue(): T | undefined;
    /**
     * Returns the front item without removing it from the queue.
     * Returns `undefined` if the queue is empty.
     *
     * @returns {*}
     */
    peek(): T | undefined;
    /**
     * Returns the number of items in the queue.
     *
     * @returns {Integer}
     */
    size(): number;
    /**
     * Returns all items in the queue.
     *
     * @returns {Array}
     */
    items(): T[];
    /**
     * Returns `true` if there are no items in the queue, `false` otherwise.
     *
     * @returns {Boolean}
     */
    isEmpty(): boolean;
    /**
     * Returns `true` if there are items in the queue,
     * `false` when the queue is empty.
     *
     * @returns {Boolean}
     */
    isNotEmpty(): boolean;
    /**
     * Removes all items from the queue.
     *
     * @returns {Queue}
     */
    clear(): this;
}
