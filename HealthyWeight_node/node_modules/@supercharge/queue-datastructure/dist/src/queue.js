'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = void 0;
const iterator_1 = require("./iterator");
class Queue {
    /**
     * Creates a new Queue instance and
     * enqueues the given `items`.
     *
     * @param  {*} items
     */
    constructor(...items) {
        this.queue = [].concat(...items);
    }
    /**
     * Returns an iterable of the values in the queue.
     *
     * @returns {IterableIterator}
     */
    [Symbol.iterator]() {
        return new iterator_1.QueueIterator(this.queue);
    }
    /**
     * Pushes new `items` into the queue.
     *
     * @param  {*} items
     *
     * @returns {Queue}
     */
    enqueue(...items) {
        this.queue = this.queue.concat([].concat(...items));
        return this;
    }
    /**
     * Removes and returns the item which is up for processing.
     * Returns `undefined` if the queue is empty.
     *
     * @returns {*}
     */
    dequeue() {
        return this.queue.shift();
    }
    /**
     * Returns the front item without removing it from the queue.
     * Returns `undefined` if the queue is empty.
     *
     * @returns {*}
     */
    peek() {
        return this.queue[0];
    }
    /**
     * Returns the number of items in the queue.
     *
     * @returns {Integer}
     */
    size() {
        return this.queue.length;
    }
    /**
     * Returns all items in the queue.
     *
     * @returns {Array}
     */
    items() {
        return this.queue.slice(0);
    }
    /**
     * Returns `true` if there are no items in the queue, `false` otherwise.
     *
     * @returns {Boolean}
     */
    isEmpty() {
        return this.size() === 0;
    }
    /**
     * Returns `true` if there are items in the queue,
     * `false` when the queue is empty.
     *
     * @returns {Boolean}
     */
    isNotEmpty() {
        return !this.isEmpty();
    }
    /**
     * Removes all items from the queue.
     *
     * @returns {Queue}
     */
    clear() {
        this.queue = [];
        return this;
    }
}
exports.Queue = Queue;
