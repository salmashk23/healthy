export declare class Goodies {
    /**
     * Handles the tap call and delegates it either to an async tap
     * handler or to a sync tap handler.
     *
     * @param {*} value
     * @param {Function} callback
     *
     * @returns {*} value
     */
    tap<T>(value: T, callback?: (value: T) => any): any;
    /**
     * Calls the given `callback` function with the
     * given `value` and returns `value`.
     *
     * @param {*} value
     * @param {Function} callback
     *
     * @returns {*} value
     */
    tapSync(value: any, callback?: Function): any;
    /**
    * Calls the given `callback` function with the given `value`
    * and returns `value`. It resolves the `value` before
    * passing it to the callback in case it is a Promise.
     *
     * @param {*} value
     * @param {Function} callback
     *
     * @returns {*} value
     */
    tapAsync(value: any, callback?: (value: any) => Promise<any>): Promise<any>;
    /**
     * Calls the given `callback` function with the given `value` and returns
     * the result of the callback. It resolves the `value` before passing
     * it to the callback in case it is a Promise.
     *
     * @param {*} value
     * @param {Function} callback
     *
     * @returns {*} value
     */
    upon<T>(value: any, callback?: (value: T) => any): any;
    /**
     * Calls the given `callback` function with the given `value` and returns
     * the result of the callback.
     *
     * @param {*} value
     * @param {Function} callback
     *
     * @returns {*} value
     */
    uponSync(value: any, callback?: Function): any;
    /**
     * Calls the given `callback` function with the given `value` and returns
     * the result of the callback. It resolves the `value` before passing
     * it to the callback in case it is a Promise.
     *
     * @param {*} value
     * @param {Function} callback
     *
     * @returns {*} value
     */
    uponAsync(value: any, callback?: Function): Promise<any>;
    /**
     * Determine whether the given `promise` is a Promise.
     *
     * @param {*} promise
     *
     * @returns {Boolean}
     */
    isPromise(promise?: any): boolean;
    /**
     * Determine whether the given `input` is a function.
     *
     * @param {*} input
     *
     * @returns {Boolean}
     */
    isFunction(input: any): boolean;
    /**
     * Determine whether the given `func` is an async function.
     *
     * @param {*} input
     *
     * @returns {Boolean}
     */
    isAsyncFunction(input: any): boolean;
    /**
     * Runs the given `callback` if the `predicate` is `null` or `undefined`.
     *
     * @param {Boolean} predicate
     * @param {Function} callback
     *
     * @returns {*}
     */
    ifNullish<R>(predicate: boolean, callback: () => R | Promise<R>): undefined | R | Promise<R>;
    /**
     * Determine whether the given `input` is `null` or `undefined`.
     *
     * @param {*} input
     *
     * @returns {Boolean}
     */
    isNullish(input: any): boolean;
    /**
     * Returns the resolved ESM default exports and CommonJS (module) exports.
     *
     * @param input
     *
     * @returns {*}
     */
    esmResolve(input: any): any;
    /**
     * Returns the required and resolved ESM default exports and CommonJS (module) exports.
     *
     * @param {String} path
     *
     * @returns {*}
     */
    esmRequire(path: string): any;
}
