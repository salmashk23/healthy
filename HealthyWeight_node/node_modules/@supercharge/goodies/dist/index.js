'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.esmRequire = exports.esmResolve = exports.isNullish = exports.ifNullish = exports.isAsyncFunction = exports.isPromise = exports.isFunction = exports.upon = exports.tap = void 0;
const goodies_1 = require("./goodies");
function tap(value, callback) {
    return new goodies_1.Goodies().tap(value, callback);
}
exports.tap = tap;
function upon(value, callback) {
    return new goodies_1.Goodies().upon(value, callback);
}
exports.upon = upon;
/**
 * Determine whether the given `input` is a function.
 *
 * @param {*} input
 *
 * @returns {Boolean}
 *
 * @example
 * isFunction('no') // false
 * isFunction(() => {}) // true
 * isFunction(function () {}) // true
 */
function isFunction(input) {
    return new goodies_1.Goodies().isFunction(input);
}
exports.isFunction = isFunction;
/**
 * Determine whether the given `promise` is a Promise.
 *
 * @param {*} promise
 *
 * @returns {Boolean}
 *
 * @example
 * isPromise('no') // false
 * isPromise(new Promise(() => {})) // true
 */
function isPromise(promise) {
    return new goodies_1.Goodies().isPromise(promise);
}
exports.isPromise = isPromise;
/**
 * Determine whether the given `input` is an async function.
 *
 * @param {*} input
 *
 * @returns {Boolean}
 */
function isAsyncFunction(input) {
    return new goodies_1.Goodies().isAsyncFunction(input);
}
exports.isAsyncFunction = isAsyncFunction;
function ifNullish(input, callback) {
    return new goodies_1.Goodies().ifNullish(input, callback);
}
exports.ifNullish = ifNullish;
/**
 * Runs the given `callback` if the `predicate` is `null` or `undefined`.
 *
 * @param {Boolean} predicate
 * @param {Function} callback
 *
 * @returns {*}
 */
function isNullish(input) {
    return new goodies_1.Goodies().isNullish(input);
}
exports.isNullish = isNullish;
/**
 * Returns the resolved ESM default exports and CommonJS (module) exports.
 *
 * @param {*} input
 *
 * @returns {*}
 */
function esmResolve(input) {
    return new goodies_1.Goodies().esmResolve(input);
}
exports.esmResolve = esmResolve;
/**
 * `require`s with the given `path` and returns the resolved
 * ESM default exports and CommonJS (module) exports.
 *
 * @param {String} path
 *
 * @returns {*}
 */
function esmRequire(path) {
    return new goodies_1.Goodies().esmRequire(path);
}
exports.esmRequire = esmRequire;
